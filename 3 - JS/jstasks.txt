0. 	Сделать функцию Sum для произвольного количества аргументов.
	Sum(1)(2)(3) возвращает 6
	Sum(1)(2)(3)(4)(10) возвращает 20
	Т.е. после любого количества вызовов можно вызвать еще раз, но так же после любого числа вызовов доступен valueOf c результатом вычислений.

1. 	Нужно написать метод группировки анаграмм. Анаграммы — слова, состоящие из одинаковых символов, но расположенных в разном порядке. 
	То есть имеется общий массив строк, а получить нужно массив, в котором каждый элемент – это массив строк-анаграмм.
   
2. 	Нужно написать метод, проверяющий является ли строка палиндромом. Пробелы и регистр не учитываем.

3. 	Есть строка из последовательности 0 и 1. Примеры: ‘000111011110101’, ‘1’, ‘0’, ‘01’, ‘010101100’ и тд. 
	Нужно написать метод, который вернет длину наибольшей последовательности единиц. 
	Например, для строки ‘000111011110101’ результат будет 4, для строки ‘1’ результат будет 1.
   
4.	Более сложный вариант задачи 3. Добавляем условие, что можно удалить из строки один символ ‘0’.

5. 	Написать функцию path, которая по пути возвращают значение свойства объекта. Пример:
	const person = {
	 birth: {
	   place: {
		 country: 'Russia'
	   }
	 }
	};
	path(person, 'birth.place.country') === 'Russia'
   
6. 	Написать метод, который на вход принимает JSON, а на выходе возвращает массив встретившихся в значениях чисел. 
	Т.е. значениями свойств JSON могут быть строки, числа, массивы и тд, а на выходе – массив чисел.
	Это задача на обход дерева.
 